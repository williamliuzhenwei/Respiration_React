{"version":3,"sources":["Component/Plot.js","Component/Clock.js","Component/Login.js","Component/Register.js","App.js","reportWebVitals.js","index.js"],"names":["data","timer1","entry","res","config","xField","yField","label","style","fill","point","size","shape","Plot","handleClick","setState","state","isToggleOn","render","id","textAlign","type","onClick","document","getElementById","innerHTML","date","Date","this","timerID","setInterval","tick","clearInterval","fetch","then","response","json","console","log","rate","Math","floor","random","TimeStamp","Rate","result","push","className","React","Component","Clock","marginTop","toLocaleTimeString","Login","Register","App","marginRight","fontSize","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.acade2c7.chunk.js","sourcesContent":["import React from 'react';\nimport {Button} from 'antd';\nimport { Line } from '@ant-design/charts';\n\n\n\n//try microphone example\nvar data = [];\nvar timer1 = 0;\nvar entry = {};\nvar res = {};\n// for (var i = 0; i < data.length; i++){\n    // data[i].TimeStamp = data[i].TimeStamp - +1.726925E+04;\n    // data[i].Resistance = parseFloat(data[i].Resistance, 10);\n    // data[i].Resistance -= 700;\n// }\n// Toggle = new Toggle;\n\nconst config = {\n  data,\n\n  xField: 'TimeStamp',\n  yField: 'Rate',\n  label: {\n    style: {\n      fill: '#aaa',\n    },\n  },\n  // smooth: true,\n  // autoFit: true,\n  // yDim: {\n  //   min: 700,\n  //   max: 800\n  // },\n  point: {\n    size: 1,\n    shape: 'dot',\n  },\n};\n\nconst fetchData = () => {\n  \n  return fetch(\"https://api.particle.io/v1/devices/2d004e000d51353532343635/analogvalue?access_token=4ec91795c48fcb469901a8c61e670f4d75ec5cce\")\n        .then((response) => response.json())\n        .then((data) => res = data)\n        .then(console.log(res));}\n\nclass Plot extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n        date: new Date(),\n        isToggleOn: true\n    }\n}\nhandleClick = () => {\n  this.setState(state => ({\n    isToggleOn: !state.isToggleOn\n  }));\n}\n\ncomponentDidMount() {\n    this.timerID = setInterval(\n        () => this.tick(),\n        1000\n    );\n}\n\ncomponentWillUnmount() {\n    clearInterval(this.timerID);\n}\n\ntick() {\n    fetchData();\n    //res.result substiture \n    let rate = Math.floor(Math.random() * (17 - 8) + 8);\n    entry = {TimeStamp: timer1, Rate: res.result};\n    timer1 = timer1 + 1;\n  if (this.state.isToggleOn == true){\n    data.push(entry)\n    if (rate > 14){\n      document.getElementById(\"resRate\").innerHTML = res.result;\n      document.getElementById(\"resRate\").className = \"resRate_black\";\n    } else if (rate <= 14 && rate > 11){\n      document.getElementById(\"resRate\").innerHTML = res.result;\n      document.getElementById(\"resRate\").className = \"resRate_black\";\n    } else if (rate <= 11){\n      document.getElementById(\"resRate\").innerHTML = res.result;\n      document.getElementById(\"resRate\").className = \"resRate_black\";\n    } else if (rate <= 0 || rate == \"undefined\"){\n      document.getElementById(\"resRate\").innerHTML = \"Don't hold your breath!\";\n      document.getElementById(\"resRate\").className = \"resRate_red\";\n    } \n    \n  } else if (this.state.isToggleOn == false) {\n    timer1 = timer1 - 1;\n    entry = {TimeStamp: timer1, Rate: 0}\n    data.push(entry)\n    document.getElementById(\"resRate\").innerHTML = \"Disconnected\";\n  }\n    this.setState({\n        date: new Date()\n    })\n}\n      render = () => {\n        if (this.state.isToggleOn == true){\n          return (\n          <>\n          <Button id = \"toggle\" style= {{textAlign:'center'}} type = 'primary' onClick={this.handleClick}>\n                  {this.state.isToggleOn ? 'ON' : 'OFF'}\n          </Button>\n          <br></br>\n          <Line {...config} />\n          <br></br>\n          <h2>Respiration Rate</h2>\n          </>);\n        } else if (this.state.isToggleOn == false){\n          document.getElementById(\"resRate\").innerHTML = \"Disconnected\";\n          // data = [];\n          return (\n          <>\n          \n          <Button id = \"toggle\" style= {{textAlign:'center'}} type = 'secondary' onClick={this.handleClick}>\n                  {this.state.isToggleOn ? 'ON' : 'OFF'}\n          </Button> \n          <br></br>\n          <Line {...config} />\n          <br></br>\n          <h2>Respiration Rate</h2>\n          </>);\n        }\n        \n      }\n       \n};\n\n\n\nexport default Plot;","import React from 'react';\nclass Clock extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            date: new Date()\n        }\n    }\n\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.tick(),\n            1000\n        );\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n    tick() {\n        this.setState({\n            date: new Date()\n        })\n    }\n\n    render = () => {\n        return (\n            <div>\n            <h1 style = {{textAlign: 'center', marginTop: -20}}>{this.state.date.toLocaleTimeString()}.</h1>\n            </div>\n        );\n    }\n}\n\n\nexport default Clock","import {Button} from 'antd';\nconst Login = () => {\n    return(\n        <Button type = \"primary\"> Login </Button>\n    )\n}\n\nexport default Login","import {Button} from 'antd';\nconst Register = () => {\n    return(\n        <Button type = \"primary\"> Register </Button>\n    )\n}\n\nexport default Register","import Plot from './Component/Plot'\nimport Clock from './Component/Clock'\nimport Login from './Component/Login'\nimport Register from './Component/Register'\nimport React from 'react';\n\nimport './index.css'\nimport './text.css'\n\n\nclass App extends React.Component {\n  \n  render = () => {\n    return (\n    <>\n    <html style={{ \n            // backgroundColor: '#fffbe6'\n          }}> \n    <body >\n    <div style={{ textAlign:'right',\n                  marginTop: 15,\n                  marginRight: 15, \n          }}>\n      \n    <Login />\n      &nbsp;\n    <Register />\n    <Clock /> \n      </div>\n    <div>\n      <h1 style= {{textAlign : 'center'}}>Respiration rate chart &nbsp;&nbsp;\n      {/* <Toggle /> */}\n      </h1>\n      \n    </div>\n    <div style= {{textAlign : 'center'}}>\n    <Plot />\n    </div>\n  \n    <div>\n      <h1  id = \"resRate\" className = \"resRate_red\" style = {{textAlign: 'center', fontSize:50}}>\n        </h1>\n\n      </div>\n      </body>\n      </html>\n    </>\n      );\n  }   \n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}