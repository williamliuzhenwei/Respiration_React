[{"/Users/liuzhenwei/Developer/Respiration_React/Frontend/src/index.js":"1","/Users/liuzhenwei/Developer/Respiration_React/Frontend/src/reportWebVitals.js":"2","/Users/liuzhenwei/Developer/Respiration_React/Frontend/src/App.js":"3","/Users/liuzhenwei/Developer/Respiration_React/Frontend/src/Component/Login.js":"4","/Users/liuzhenwei/Developer/Respiration_React/Frontend/src/Component/Clock.js":"5","/Users/liuzhenwei/Developer/Respiration_React/Frontend/src/Component/Register.js":"6","/Users/liuzhenwei/Developer/Respiration_React/Frontend/src/Component/Plot.js":"7"},{"size":500,"mtime":1634153297437,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1634153297438,"results":"10","hashOfConfig":"9"},{"size":1048,"mtime":1637048914036,"results":"11","hashOfConfig":"9"},{"size":142,"mtime":1634580158142,"results":"12","hashOfConfig":"9"},{"size":681,"mtime":1634836684536,"results":"13","hashOfConfig":"9"},{"size":151,"mtime":1634580327297,"results":"14","hashOfConfig":"9"},{"size":4633,"mtime":1638322611767,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"10h33y0",{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},"/Users/liuzhenwei/Developer/Respiration_React/Frontend/src/index.js",[],["32","33"],"/Users/liuzhenwei/Developer/Respiration_React/Frontend/src/reportWebVitals.js",[],"/Users/liuzhenwei/Developer/Respiration_React/Frontend/src/App.js",[],"/Users/liuzhenwei/Developer/Respiration_React/Frontend/src/Component/Login.js",[],"/Users/liuzhenwei/Developer/Respiration_React/Frontend/src/Component/Clock.js",[],"/Users/liuzhenwei/Developer/Respiration_React/Frontend/src/Component/Register.js",[],"/Users/liuzhenwei/Developer/Respiration_React/Frontend/src/Component/Plot.js",["34","35","36","37","38","39","40","41","42"],"import React from 'react';\nimport {Button} from 'antd';\nimport { Line } from '@ant-design/charts';\nimport { ContinuousLegend } from '@antv/g2/lib/dependents';\n\n\nvar data = [];\nvar timer1 = 0;\nvar entry = {};\nvar res = {};\nvar counter = 10; // To update the graph every 10 seconds\n\n// Main Plot configuration\nconst config = {\n  data,\n  xField: 'TimeStamp',\n  yField: 'Rate',\n  label: {\n    style: {\n      fill: '#aaa',\n    },\n  },\n  point: {\n    size: 1,\n    shape: 'dot',\n  },\n};\n\n// Communicate with particle Photon\nconst fetchData = () => {\n  // David  https://api.particle.io/v1/devices/440048000d51353532343635/output1?access_token=5337556d927166dd61f24a448628ab25b487250d\n  // Siyuan https://api.particle.io/v1/devices/2d004e000d51353532343635/analogvalue?access_token=4ec91795c48fcb469901a8c61e670f4d75ec5cce\n  return fetch(\"https://api.particle.io/v1/devices/440048000d51353532343635/respiration?access_token=5337556d927166dd61f24a448628ab25b487250d\")\n        .then((response) => response.json())\n        .then((data) => res = data)\n        .then(console.log(res));}\n\n// Main Module \nclass Plot extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n        date: new Date(),\n        isToggleOn: true\n    }\n}\nhandleClick = () => {\n  this.setState(state => ({\n    isToggleOn: !state.isToggleOn\n  }));\n}\n\nrefresh = () =>{\n  window.location.reload(false);\n}\n\ncomponentDidMount() {\n    this.timerID = setInterval(\n        () => this.tick(),\n        // time interval in millis;\n        999\n    );\n}\n\ncomponentWillUnmount() {\n    clearInterval(this.timerID);\n}\n\ntick() {\n  fetchData();\n  // let resR = Math.floor(Math.random() * (17 - 8) + 8);\n  let resR = res.result;\n  console.log(counter);\n  if (this.state.isToggleOn == true){\n    if(res.ok == false){ // Connected, but not reading\n      document.getElementById(\"resRate\").innerHTML = \"Photon error || \" + res.error ;\n      document.getElementById(\"resRate\").className = \"resRate_red\";\n      counter = 10;\n    }  else if (resR == 0){  // Connected, Measring \n      document.getElementById(\"resRate\").innerHTML = \"Measuring\";\n      document.getElementById(\"resRate\").className = \"resRate_green\";\n      counter = 10;\n    } else if (resR < 6 || resR > 60){  // Bad result \n      console.log(resR);\n      document.getElementById(\"resRate\").innerHTML = \"Check Epidermal Device (Strain Gauge)\"; // Please check adhesive (maybe loose)\n      document.getElementById(\"resRate\").className = \"resRate_red\";\n      counter = 10;\n    } else if (res.error == \"Timed out.\" ){ \n      document.getElementById(\"resRate\").innerHTML = \"Cannot connect to Photon\";\n      document.getElementById(\"resRate\").className = \"resRate_red\";\n      counter = 10;\n    } else if (resR >= 6 && resR <= 60){ // In normal range\n        if (counter == 10){\n        entry = {TimeStamp: timer1, Rate: Math.round(resR)};\n        timer1 = timer1 + 1;\n        data.push(entry)\n        document.getElementById(\"resRate\").innerHTML = Math.round(resR);\n        document.getElementById(\"resRate\").className = \"resRate_black\";\n        counter = 0;\n        }\n        counter++;\n    } else {\n      document.getElementById(\"resRate\").innerHTML = \"Checking Status\";\n      document.getElementById(\"resRate\").className = \"resRate_black\";\n      counter = 10;\n    }\n    \n  } else if (this.state.isToggleOn == false) {\n    entry = {TimeStamp: timer1, Rate: 0}\n    data.push(entry)\n    document.getElementById(\"resRate\").innerHTML = \"Disconnected\";\n    counter = 10;\n  }\n    this.setState({\n        date: new Date()\n    })\n}\n      render = () => {\n        if (this.state.isToggleOn == true){\n          return (\n          <>\n          <Button id = \"toggle\" style= {{textAlign:'center'}} type = 'primary' onClick={this.handleClick}>\n                  {this.state.isToggleOn ? 'ON' : 'OFF'}\n          </Button>\n          &nbsp;&nbsp;&nbsp;&nbsp;\n          <Button id = \"refresh\" style= {{textAlign:'center'}} type = 'primart' onClick={this.refresh}>\n                Refresh\n          </Button>\n          <br></br>\n          <Line {...config} />\n          <br></br>\n          </>);\n        } else if (this.state.isToggleOn == false){\n          document.getElementById(\"resRate\").innerHTML = \"Disconnected\";\n          // data = [];\n          return (\n          <>\n          \n          <Button id = \"toggle\" style= {{textAlign:'center'}} type = 'secondary' onClick={this.handleClick}>\n                  {this.state.isToggleOn ? 'ON' : 'OFF'}\n          </Button> \n          <br></br>\n          <Line {...config} />\n          <br></br>\n          \n          </>);\n        }\n        \n      }\n       \n};\n\n\n\nexport default Plot;",{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":4,"column":10,"nodeType":"49","messageId":"50","endLine":4,"endColumn":26},{"ruleId":"51","severity":1,"message":"52","line":74,"column":29,"nodeType":"53","messageId":"54","endLine":74,"endColumn":31},{"ruleId":"51","severity":1,"message":"52","line":75,"column":15,"nodeType":"53","messageId":"54","endLine":75,"endColumn":17},{"ruleId":"51","severity":1,"message":"52","line":79,"column":22,"nodeType":"53","messageId":"54","endLine":79,"endColumn":24},{"ruleId":"51","severity":1,"message":"52","line":88,"column":26,"nodeType":"53","messageId":"54","endLine":88,"endColumn":28},{"ruleId":"51","severity":1,"message":"52","line":93,"column":21,"nodeType":"53","messageId":"54","endLine":93,"endColumn":23},{"ruleId":"51","severity":1,"message":"52","line":108,"column":36,"nodeType":"53","messageId":"54","endLine":108,"endColumn":38},{"ruleId":"51","severity":1,"message":"52","line":119,"column":35,"nodeType":"53","messageId":"54","endLine":119,"endColumn":37},{"ruleId":"51","severity":1,"message":"52","line":133,"column":42,"nodeType":"53","messageId":"54","endLine":133,"endColumn":44},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-unused-vars","'ContinuousLegend' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]