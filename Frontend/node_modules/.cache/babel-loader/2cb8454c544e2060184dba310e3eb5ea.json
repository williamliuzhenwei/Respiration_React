{"ast":null,"code":"var indent = ' '.repeat(2);\nvar indentData = ' '.repeat(4);\nexport function inspectMatrix() {\n  return inspectMatrixWithOptions(this);\n}\nexport function inspectMatrixWithOptions(matrix) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$maxRows = options.maxRows,\n      maxRows = _options$maxRows === void 0 ? 15 : _options$maxRows,\n      _options$maxColumns = options.maxColumns,\n      maxColumns = _options$maxColumns === void 0 ? 10 : _options$maxColumns,\n      _options$maxNumSize = options.maxNumSize,\n      maxNumSize = _options$maxNumSize === void 0 ? 8 : _options$maxNumSize;\n  return \"\".concat(matrix.constructor.name, \" {\\n\").concat(indent, \"[\\n\").concat(indentData).concat(inspectData(matrix, maxRows, maxColumns, maxNumSize), \"\\n\").concat(indent, \"]\\n\").concat(indent, \"rows: \").concat(matrix.rows, \"\\n\").concat(indent, \"columns: \").concat(matrix.columns, \"\\n}\");\n}\n\nfunction inspectData(matrix, maxRows, maxColumns, maxNumSize) {\n  var rows = matrix.rows,\n      columns = matrix.columns;\n  var maxI = Math.min(rows, maxRows);\n  var maxJ = Math.min(columns, maxColumns);\n  var result = [];\n\n  for (var i = 0; i < maxI; i++) {\n    var line = [];\n\n    for (var j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j), maxNumSize));\n    }\n\n    result.push(\"\".concat(line.join(' ')));\n  }\n\n  if (maxJ !== columns) {\n    result[result.length - 1] += \" ... \".concat(columns - maxColumns, \" more columns\");\n  }\n\n  if (maxI !== rows) {\n    result.push(\"... \".concat(rows - maxRows, \" more rows\"));\n  }\n\n  return result.join(\"\\n\".concat(indentData));\n}\n\nfunction formatNumber(num, maxNumSize) {\n  var numStr = String(num);\n\n  if (numStr.length <= maxNumSize) {\n    return numStr.padEnd(maxNumSize, ' ');\n  }\n\n  var precise = num.toPrecision(maxNumSize - 2);\n\n  if (precise.length <= maxNumSize) {\n    return precise;\n  }\n\n  var exponential = num.toExponential(maxNumSize - 2);\n  var eIndex = exponential.indexOf('e');\n  var e = exponential.slice(eIndex);\n  return exponential.slice(0, maxNumSize - e.length) + e;\n}","map":{"version":3,"sources":["/Users/liuzhenwei/Desktop/Respiration_React/my-app/node_modules/ml-matrix/src/inspect.js"],"names":["indent","repeat","indentData","inspectMatrix","inspectMatrixWithOptions","matrix","options","maxRows","maxColumns","maxNumSize","constructor","name","inspectData","rows","columns","maxI","Math","min","maxJ","result","i","line","j","push","formatNumber","get","join","length","num","numStr","String","padEnd","precise","toPrecision","exponential","toExponential","eIndex","indexOf","e","slice"],"mappings":"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","sourcesContent":["const indent = ' '.repeat(2);\nconst indentData = ' '.repeat(4);\n\nexport function inspectMatrix() {\n  return inspectMatrixWithOptions(this);\n}\n\nexport function inspectMatrixWithOptions(matrix, options = {}) {\n  const { maxRows = 15, maxColumns = 10, maxNumSize = 8 } = options;\n  return `${matrix.constructor.name} {\n${indent}[\n${indentData}${inspectData(matrix, maxRows, maxColumns, maxNumSize)}\n${indent}]\n${indent}rows: ${matrix.rows}\n${indent}columns: ${matrix.columns}\n}`;\n}\n\nfunction inspectData(matrix, maxRows, maxColumns, maxNumSize) {\n  const { rows, columns } = matrix;\n  const maxI = Math.min(rows, maxRows);\n  const maxJ = Math.min(columns, maxColumns);\n  const result = [];\n  for (let i = 0; i < maxI; i++) {\n    let line = [];\n    for (let j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j), maxNumSize));\n    }\n    result.push(`${line.join(' ')}`);\n  }\n  if (maxJ !== columns) {\n    result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\n  }\n  if (maxI !== rows) {\n    result.push(`... ${rows - maxRows} more rows`);\n  }\n  return result.join(`\\n${indentData}`);\n}\n\nfunction formatNumber(num, maxNumSize) {\n  const numStr = String(num);\n  if (numStr.length <= maxNumSize) {\n    return numStr.padEnd(maxNumSize, ' ');\n  }\n  const precise = num.toPrecision(maxNumSize - 2);\n  if (precise.length <= maxNumSize) {\n    return precise;\n  }\n  const exponential = num.toExponential(maxNumSize - 2);\n  const eIndex = exponential.indexOf('e');\n  const e = exponential.slice(eIndex);\n  return exponential.slice(0, maxNumSize - e.length) + e;\n}\n"]},"metadata":{},"sourceType":"module"}