{"ast":null,"code":"var _jsxFileName = \"/Users/liuzhenwei/Desktop/ECE191/my-app/src/Component/Plot.js\";\nimport React from 'react';\nimport { Line } from '@ant-design/charts';\n\nconst fs = require('fs');\n\nimport { readFile, readFileSync } from 'fs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar a;\n\nfunction csvJSON(csv) {\n  var lines = csv.split(\"\\r\\n\");\n  var result = [];\n  var headers = lines[0].split(\"\\t\");\n\n  for (var i = 1; i < lines.length; i++) {\n    var obj = {};\n    var currentline = lines[i].split(\"\\t\");\n\n    for (var j = 0; j < headers.length; j++) {\n      obj[headers[j]] = currentline[j];\n    }\n\n    result.push(obj);\n  } //return result; //JavaScript object\n\n\n  return result; //JSON\n}\n\nreadFile('/Users/liuzhenwei/Desktop/ECE191/test.csv', 'utf8', (err, data) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n\n  a = csvJSON(data); // var timeStamp = [];\n  // var resistance = [];\n  // let begin = a[0].TimeStamp;\n  // for (var i = 0; i < a.length; i++){\n  //     timeStamp.push(a[i].TimeStamp - begin);\n  //     resistance.push(a[i].Resistance);\n  // }\n});\nconst data = [{\n  year: '1991',\n  value: 3\n}, {\n  year: '1992',\n  value: 4\n}, {\n  year: '1993',\n  value: 3.5\n}, {\n  year: '1994',\n  value: 5\n}, {\n  year: '1995',\n  value: 4.9\n}, {\n  year: '1996',\n  value: 6\n}, {\n  year: '1997',\n  value: 7\n}, {\n  year: '1998',\n  value: 9\n}, {\n  year: '1999',\n  value: 13\n}];\nconst config = {\n  a,\n  height: 400,\n  width: 800,\n  xField: 'year',\n  yField: 'value',\n  point: {\n    size: 5,\n    shape: 'diamond'\n  },\n  label: {\n    style: {\n      fill: '#aaa'\n    }\n  }\n};\n\nclass Plot extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.render = () => {\n      return /*#__PURE__*/_jsxDEV(Line, { ...config\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 16\n      }, this);\n    };\n  }\n\n}\n\n;\nexport default Plot;","map":{"version":3,"sources":["/Users/liuzhenwei/Desktop/ECE191/my-app/src/Component/Plot.js"],"names":["React","Line","fs","require","readFile","readFileSync","a","csvJSON","csv","lines","split","result","headers","i","length","obj","currentline","j","push","err","data","console","error","year","value","config","height","width","xField","yField","point","size","shape","label","style","fill","Plot","Component","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Line } from '@ant-design/charts';\n\nconst fs = require('fs');\nimport { readFile, readFileSync } from 'fs';\nvar a;\n\nfunction csvJSON(csv){\n\n    var lines=csv.split(\"\\r\\n\");\n    var result = [];\n    var headers=lines[0].split(\"\\t\");\n  \n    for(var i=1;i<lines.length;i++){\n  \n        var obj = {};\n        var currentline=lines[i].split(\"\\t\");\n  \n        for(var j=0;j<headers.length;j++){\n            obj[headers[j]] = currentline[j];\n        }\n  \n        result.push(obj);\n        \n    }\n  \n    //return result; //JavaScript object\n    return result; //JSON\n  }\n\nreadFile('/Users/liuzhenwei/Desktop/ECE191/test.csv', 'utf8' , (err, data) => {\n    if (err) {\n      console.error(err)\n      return\n    }\n    a = csvJSON(data);\n    // var timeStamp = [];\n    // var resistance = [];\n    // let begin = a[0].TimeStamp;\n    // for (var i = 0; i < a.length; i++){\n    //     timeStamp.push(a[i].TimeStamp - begin);\n    //     resistance.push(a[i].Resistance);\n    // }\n  })\n\nconst data = [\n    { year: '1991', value: 3 },\n    { year: '1992', value: 4 },\n    { year: '1993', value: 3.5 },\n    { year: '1994', value: 5 },\n    { year: '1995', value: 4.9 },\n    { year: '1996', value: 6 },\n    { year: '1997', value: 7 },\n    { year: '1998', value: 9 },\n    { year: '1999', value: 13 },\n  ];\n\n  const config = {\n    a,\n    height: 400,\n    width: 800,\n    xField: 'year',\n    yField: 'value',\n    point: {\n      size: 5,\n      shape: 'diamond',\n    },\n    label: {\n      style: {\n        fill: '#aaa',\n      },\n    },\n  };\n\nclass Plot extends React.Component {\n      render = () => {\n        return <Line {...config} />;\n      }\n       \n};\n\nexport default Plot;"]},"metadata":{},"sourceType":"module"}