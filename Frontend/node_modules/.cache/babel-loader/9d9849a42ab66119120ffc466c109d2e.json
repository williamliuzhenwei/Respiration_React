{"ast":null,"code":"import _classCallCheck from \"/Users/liuzhenwei/Desktop/Respiration_React/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/liuzhenwei/Desktop/Respiration_React/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\nimport { hypotenuse } from './util';\n\nvar QrDecomposition = /*#__PURE__*/function () {\n  function QrDecomposition(value) {\n    _classCallCheck(this, QrDecomposition);\n\n    value = WrapperMatrix2D.checkMatrix(value);\n    var qr = value.clone();\n    var m = value.rows;\n    var n = value.columns;\n    var rdiag = new Float64Array(n);\n    var i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      var nrm = 0;\n\n      for (i = k; i < m; i++) {\n        nrm = hypotenuse(nrm, qr.get(i, k));\n      }\n\n      if (nrm !== 0) {\n        if (qr.get(k, k) < 0) {\n          nrm = -nrm;\n        }\n\n        for (i = k; i < m; i++) {\n          qr.set(i, k, qr.get(i, k) / nrm);\n        }\n\n        qr.set(k, k, qr.get(k, k) + 1);\n\n        for (j = k + 1; j < n; j++) {\n          s = 0;\n\n          for (i = k; i < m; i++) {\n            s += qr.get(i, k) * qr.get(i, j);\n          }\n\n          s = -s / qr.get(k, k);\n\n          for (i = k; i < m; i++) {\n            qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n\n      rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n  }\n\n  _createClass(QrDecomposition, [{\n    key: \"solve\",\n    value: function solve(value) {\n      value = Matrix.checkMatrix(value);\n      var qr = this.QR;\n      var m = qr.rows;\n\n      if (value.rows !== m) {\n        throw new Error('Matrix row dimensions must agree');\n      }\n\n      if (!this.isFullRank()) {\n        throw new Error('Matrix is rank deficient');\n      }\n\n      var count = value.columns;\n      var X = value.clone();\n      var n = qr.columns;\n      var i, j, k, s;\n\n      for (k = 0; k < n; k++) {\n        for (j = 0; j < count; j++) {\n          s = 0;\n\n          for (i = k; i < m; i++) {\n            s += qr.get(i, k) * X.get(i, j);\n          }\n\n          s = -s / qr.get(k, k);\n\n          for (i = k; i < m; i++) {\n            X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n\n      for (k = n - 1; k >= 0; k--) {\n        for (j = 0; j < count; j++) {\n          X.set(k, j, X.get(k, j) / this.Rdiag[k]);\n        }\n\n        for (i = 0; i < k; i++) {\n          for (j = 0; j < count; j++) {\n            X.set(i, j, X.get(i, j) - X.get(k, j) * qr.get(i, k));\n          }\n        }\n      }\n\n      return X.subMatrix(0, n - 1, 0, count - 1);\n    }\n  }, {\n    key: \"isFullRank\",\n    value: function isFullRank() {\n      var columns = this.QR.columns;\n\n      for (var i = 0; i < columns; i++) {\n        if (this.Rdiag[i] === 0) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"upperTriangularMatrix\",\n    get: function get() {\n      var qr = this.QR;\n      var n = qr.columns;\n      var X = new Matrix(n, n);\n      var i, j;\n\n      for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          if (i < j) {\n            X.set(i, j, qr.get(i, j));\n          } else if (i === j) {\n            X.set(i, j, this.Rdiag[i]);\n          } else {\n            X.set(i, j, 0);\n          }\n        }\n      }\n\n      return X;\n    }\n  }, {\n    key: \"orthogonalMatrix\",\n    get: function get() {\n      var qr = this.QR;\n      var rows = qr.rows;\n      var columns = qr.columns;\n      var X = new Matrix(rows, columns);\n      var i, j, k, s;\n\n      for (k = columns - 1; k >= 0; k--) {\n        for (i = 0; i < rows; i++) {\n          X.set(i, k, 0);\n        }\n\n        X.set(k, k, 1);\n\n        for (j = k; j < columns; j++) {\n          if (qr.get(k, k) !== 0) {\n            s = 0;\n\n            for (i = k; i < rows; i++) {\n              s += qr.get(i, k) * X.get(i, j);\n            }\n\n            s = -s / qr.get(k, k);\n\n            for (i = k; i < rows; i++) {\n              X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n            }\n          }\n        }\n      }\n\n      return X;\n    }\n  }]);\n\n  return QrDecomposition;\n}();\n\nexport { QrDecomposition as default };","map":{"version":3,"sources":["/Users/liuzhenwei/Desktop/Respiration_React/my-app/node_modules/ml-matrix/src/dc/qr.js"],"names":["Matrix","WrapperMatrix2D","hypotenuse","QrDecomposition","value","checkMatrix","qr","clone","m","rows","n","columns","rdiag","Float64Array","i","j","k","s","nrm","get","set","QR","Rdiag","Error","isFullRank","count","X","subMatrix"],"mappings":"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","sourcesContent":["import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nimport { hypotenuse } from './util';\n\nexport default class QrDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let qr = value.clone();\n    let m = value.rows;\n    let n = value.columns;\n    let rdiag = new Float64Array(n);\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      let nrm = 0;\n      for (i = k; i < m; i++) {\n        nrm = hypotenuse(nrm, qr.get(i, k));\n      }\n      if (nrm !== 0) {\n        if (qr.get(k, k) < 0) {\n          nrm = -nrm;\n        }\n        for (i = k; i < m; i++) {\n          qr.set(i, k, qr.get(i, k) / nrm);\n        }\n        qr.set(k, k, qr.get(k, k) + 1);\n        for (j = k + 1; j < n; j++) {\n          s = 0;\n          for (i = k; i < m; i++) {\n            s += qr.get(i, k) * qr.get(i, j);\n          }\n          s = -s / qr.get(k, k);\n          for (i = k; i < m; i++) {\n            qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n      rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let qr = this.QR;\n    let m = qr.rows;\n\n    if (value.rows !== m) {\n      throw new Error('Matrix row dimensions must agree');\n    }\n    if (!this.isFullRank()) {\n      throw new Error('Matrix is rank deficient');\n    }\n\n    let count = value.columns;\n    let X = value.clone();\n    let n = qr.columns;\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      for (j = 0; j < count; j++) {\n        s = 0;\n        for (i = k; i < m; i++) {\n          s += qr.get(i, k) * X.get(i, j);\n        }\n        s = -s / qr.get(k, k);\n        for (i = k; i < m; i++) {\n          X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n        }\n      }\n    }\n    for (k = n - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / this.Rdiag[k]);\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * qr.get(i, k));\n        }\n      }\n    }\n\n    return X.subMatrix(0, n - 1, 0, count - 1);\n  }\n\n  isFullRank() {\n    let columns = this.QR.columns;\n    for (let i = 0; i < columns; i++) {\n      if (this.Rdiag[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  get upperTriangularMatrix() {\n    let qr = this.QR;\n    let n = qr.columns;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        if (i < j) {\n          X.set(i, j, qr.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, this.Rdiag[i]);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get orthogonalMatrix() {\n    let qr = this.QR;\n    let rows = qr.rows;\n    let columns = qr.columns;\n    let X = new Matrix(rows, columns);\n    let i, j, k, s;\n\n    for (k = columns - 1; k >= 0; k--) {\n      for (i = 0; i < rows; i++) {\n        X.set(i, k, 0);\n      }\n      X.set(k, k, 1);\n      for (j = k; j < columns; j++) {\n        if (qr.get(k, k) !== 0) {\n          s = 0;\n          for (i = k; i < rows; i++) {\n            s += qr.get(i, k) * X.get(i, j);\n          }\n\n          s = -s / qr.get(k, k);\n\n          for (i = k; i < rows; i++) {\n            X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n    }\n    return X;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}