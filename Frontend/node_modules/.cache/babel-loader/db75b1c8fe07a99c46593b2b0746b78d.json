{"ast":null,"code":"import _classCallCheck from \"/Users/liuzhenwei/Desktop/Respiration_React/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/liuzhenwei/Desktop/Respiration_React/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nvar LuDecomposition = /*#__PURE__*/function () {\n  function LuDecomposition(matrix) {\n    _classCallCheck(this, LuDecomposition);\n\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n    var lu = matrix.clone();\n    var rows = lu.rows;\n    var columns = lu.columns;\n    var pivotVector = new Float64Array(rows);\n    var pivotSign = 1;\n    var i, j, k, p, s, t, v;\n    var LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n      pivotVector[i] = i;\n    }\n\n    LUcolj = new Float64Array(rows);\n\n    for (j = 0; j < columns; j++) {\n      for (i = 0; i < rows; i++) {\n        LUcolj[i] = lu.get(i, j);\n      }\n\n      for (i = 0; i < rows; i++) {\n        kmax = Math.min(i, j);\n        s = 0;\n\n        for (k = 0; k < kmax; k++) {\n          s += lu.get(i, k) * LUcolj[k];\n        }\n\n        LUcolj[i] -= s;\n        lu.set(i, j, LUcolj[i]);\n      }\n\n      p = j;\n\n      for (i = j + 1; i < rows; i++) {\n        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n          p = i;\n        }\n      }\n\n      if (p !== j) {\n        for (k = 0; k < columns; k++) {\n          t = lu.get(p, k);\n          lu.set(p, k, lu.get(j, k));\n          lu.set(j, k, t);\n        }\n\n        v = pivotVector[p];\n        pivotVector[p] = pivotVector[j];\n        pivotVector[j] = v;\n        pivotSign = -pivotSign;\n      }\n\n      if (j < rows && lu.get(j, j) !== 0) {\n        for (i = j + 1; i < rows; i++) {\n          lu.set(i, j, lu.get(i, j) / lu.get(j, j));\n        }\n      }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n  }\n\n  _createClass(LuDecomposition, [{\n    key: \"isSingular\",\n    value: function isSingular() {\n      var data = this.LU;\n      var col = data.columns;\n\n      for (var j = 0; j < col; j++) {\n        if (data.get(j, j) === 0) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: \"solve\",\n    value: function solve(value) {\n      value = Matrix.checkMatrix(value);\n      var lu = this.LU;\n      var rows = lu.rows;\n\n      if (rows !== value.rows) {\n        throw new Error('Invalid matrix dimensions');\n      }\n\n      if (this.isSingular()) {\n        throw new Error('LU matrix is singular');\n      }\n\n      var count = value.columns;\n      var X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n      var columns = lu.columns;\n      var i, j, k;\n\n      for (k = 0; k < columns; k++) {\n        for (i = k + 1; i < columns; i++) {\n          for (j = 0; j < count; j++) {\n            X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n          }\n        }\n      }\n\n      for (k = columns - 1; k >= 0; k--) {\n        for (j = 0; j < count; j++) {\n          X.set(k, j, X.get(k, j) / lu.get(k, k));\n        }\n\n        for (i = 0; i < k; i++) {\n          for (j = 0; j < count; j++) {\n            X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n          }\n        }\n      }\n\n      return X;\n    }\n  }, {\n    key: \"determinant\",\n    get: function get() {\n      var data = this.LU;\n\n      if (!data.isSquare()) {\n        throw new Error('Matrix must be square');\n      }\n\n      var determinant = this.pivotSign;\n      var col = data.columns;\n\n      for (var j = 0; j < col; j++) {\n        determinant *= data.get(j, j);\n      }\n\n      return determinant;\n    }\n  }, {\n    key: \"lowerTriangularMatrix\",\n    get: function get() {\n      var data = this.LU;\n      var rows = data.rows;\n      var columns = data.columns;\n      var X = new Matrix(rows, columns);\n\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < columns; j++) {\n          if (i > j) {\n            X.set(i, j, data.get(i, j));\n          } else if (i === j) {\n            X.set(i, j, 1);\n          } else {\n            X.set(i, j, 0);\n          }\n        }\n      }\n\n      return X;\n    }\n  }, {\n    key: \"upperTriangularMatrix\",\n    get: function get() {\n      var data = this.LU;\n      var rows = data.rows;\n      var columns = data.columns;\n      var X = new Matrix(rows, columns);\n\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < columns; j++) {\n          if (i <= j) {\n            X.set(i, j, data.get(i, j));\n          } else {\n            X.set(i, j, 0);\n          }\n        }\n      }\n\n      return X;\n    }\n  }, {\n    key: \"pivotPermutationVector\",\n    get: function get() {\n      return Array.from(this.pivotVector);\n    }\n  }]);\n\n  return LuDecomposition;\n}();\n\nexport { LuDecomposition as default };","map":{"version":3,"sources":["/Users/liuzhenwei/Desktop/Respiration_React/my-app/node_modules/ml-matrix/src/dc/lu.js"],"names":["Matrix","WrapperMatrix2D","LuDecomposition","matrix","checkMatrix","lu","clone","rows","columns","pivotVector","Float64Array","pivotSign","i","j","k","p","s","t","v","LUcolj","kmax","get","Math","min","set","abs","LU","data","col","value","Error","isSingular","count","X","subMatrixRow","isSquare","determinant","Array","from"],"mappings":"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","sourcesContent":["import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nexport default class LuDecomposition {\n  constructor(matrix) {\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n\n    let lu = matrix.clone();\n    let rows = lu.rows;\n    let columns = lu.columns;\n    let pivotVector = new Float64Array(rows);\n    let pivotSign = 1;\n    let i, j, k, p, s, t, v;\n    let LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n      pivotVector[i] = i;\n    }\n\n    LUcolj = new Float64Array(rows);\n\n    for (j = 0; j < columns; j++) {\n      for (i = 0; i < rows; i++) {\n        LUcolj[i] = lu.get(i, j);\n      }\n\n      for (i = 0; i < rows; i++) {\n        kmax = Math.min(i, j);\n        s = 0;\n        for (k = 0; k < kmax; k++) {\n          s += lu.get(i, k) * LUcolj[k];\n        }\n        LUcolj[i] -= s;\n        lu.set(i, j, LUcolj[i]);\n      }\n\n      p = j;\n      for (i = j + 1; i < rows; i++) {\n        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n          p = i;\n        }\n      }\n\n      if (p !== j) {\n        for (k = 0; k < columns; k++) {\n          t = lu.get(p, k);\n          lu.set(p, k, lu.get(j, k));\n          lu.set(j, k, t);\n        }\n\n        v = pivotVector[p];\n        pivotVector[p] = pivotVector[j];\n        pivotVector[j] = v;\n\n        pivotSign = -pivotSign;\n      }\n\n      if (j < rows && lu.get(j, j) !== 0) {\n        for (i = j + 1; i < rows; i++) {\n          lu.set(i, j, lu.get(i, j) / lu.get(j, j));\n        }\n      }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n  }\n\n  isSingular() {\n    let data = this.LU;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      if (data.get(j, j) === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let lu = this.LU;\n    let rows = lu.rows;\n\n    if (rows !== value.rows) {\n      throw new Error('Invalid matrix dimensions');\n    }\n    if (this.isSingular()) {\n      throw new Error('LU matrix is singular');\n    }\n\n    let count = value.columns;\n    let X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n    let columns = lu.columns;\n    let i, j, k;\n\n    for (k = 0; k < columns; k++) {\n      for (i = k + 1; i < columns; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    for (k = columns - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / lu.get(k, k));\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    return X;\n  }\n\n  get determinant() {\n    let data = this.LU;\n    if (!data.isSquare()) {\n      throw new Error('Matrix must be square');\n    }\n    let determinant = this.pivotSign;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      determinant *= data.get(j, j);\n    }\n    return determinant;\n  }\n\n  get lowerTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i > j) {\n          X.set(i, j, data.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, 1);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get upperTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i <= j) {\n          X.set(i, j, data.get(i, j));\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get pivotPermutationVector() {\n    return Array.from(this.pivotVector);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}