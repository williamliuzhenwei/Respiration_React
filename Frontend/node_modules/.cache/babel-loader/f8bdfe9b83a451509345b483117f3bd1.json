{"ast":null,"code":"var _jsxFileName = \"/Users/liuzhenwei/Desktop/Respiration_React/my-app/src/Component/Plot.js\";\nimport React from 'react';\nimport { Button } from 'antd';\nimport { Line } from '@ant-design/charts';\nimport { ContinuousLegend } from '@antv/g2/lib/dependents';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar data = [];\nvar timer1 = 0;\nvar entry = {};\nvar res = {}; // Main Plot configuration\n\nconst config = {\n  data,\n  xField: 'TimeStamp',\n  yField: 'Rate',\n  label: {\n    style: {\n      fill: '#aaa'\n    }\n  },\n  point: {\n    size: 1,\n    shape: 'dot'\n  }\n}; // Communicate with particle Photon\n\nconst fetchData = () => {\n  // David https://api.particle.io/v1/devices/440048000d51353532343635/output1?access_token=5337556d927166dd61f24a448628ab25b487250d\n  // Siyuan https://api.particle.io/v1/devices/2d004e000d51353532343635/analogvalue?access_token=4ec91795c48fcb469901a8c61e670f4d75ec5cce\n  return fetch(\"https://api.particle.io/v1/devices/440048000d51353532343635/output1?access_token=5337556d927166dd61f24a448628ab25b487250d\").then(response => response.json()).then(data => res = data).then(console.log(res));\n}; // Main Module \n\n\nclass Plot extends React.Component {\n  constructor() {\n    super();\n\n    this.handleClick = () => {\n      this.setState(state => ({\n        isToggleOn: !state.isToggleOn\n      }));\n    };\n\n    this.render = () => {\n      if (this.state.isToggleOn == true) {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            id: \"toggle\",\n            style: {\n              textAlign: 'center'\n            },\n            type: \"primary\",\n            onClick: this.handleClick,\n            children: this.state.isToggleOn ? 'ON' : 'OFF'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Line, { ...config\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true);\n      } else if (this.state.isToggleOn == false) {\n        document.getElementById(\"resRate\").innerHTML = \"Disconnected\"; // data = [];\n\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            id: \"toggle\",\n            style: {\n              textAlign: 'center'\n            },\n            type: \"secondary\",\n            onClick: this.handleClick,\n            children: this.state.isToggleOn ? 'ON' : 'OFF'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Line, { ...config\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true);\n      }\n    };\n\n    this.state = {\n      date: new Date(),\n      isToggleOn: true\n    };\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), // time interval in millis;\n    1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    fetchData(); // let resR = Math.floor(Math.random() * (17 - 8) + 8);\n\n    let resR = res.result;\n\n    if (this.state.isToggleOn == true) {\n      if (res.ok == false) {\n        // Connected, but not reading\n        document.getElementById(\"resRate\").innerHTML = \"Photon error || \" + res.error;\n        document.getElementById(\"resRate\").className = \"resRate_red\";\n      } else if (resR == 0) {\n        // Connected, Measring \n        document.getElementById(\"resRate\").innerHTML = \"Measuring\";\n        document.getElementById(\"resRate\").className = \"resRate_green\";\n      } else if (resR < 6 || resR > 60) {\n        // Bad result \n        console.log(resR);\n        document.getElementById(\"resRate\").innerHTML = \"Check Epidermal Device (Strain Gauge)\"; // Please check adhesive (maybe loose)\n\n        document.getElementById(\"resRate\").className = \"resRate_red\";\n      } else if (resR >= 6 && resR <= 60) {\n        // In normal range\n        entry = {\n          TimeStamp: timer1,\n          Rate: Math.round(resR)\n        };\n        timer1 = timer1 + 1;\n        data.push(entry);\n        document.getElementById(\"resRate\").innerHTML = Math.round(resR);\n        document.getElementById(\"resRate\").className = \"resRate_black\";\n      } else if (res.error == \"Timed out.\") {\n        document.getElementById(\"resRate\").innerHTML = \"Cannot connect to Particle Cloud\";\n        document.getElementById(\"resRate\").className = \"resRate_red\";\n      } else {\n        document.getElementById(\"resRate\").innerHTML = \"Cannot connection with Photon\";\n        document.getElementById(\"resRate\").className = \"resRate_red\";\n      }\n    } else if (this.state.isToggleOn == false) {\n      entry = {\n        TimeStamp: timer1,\n        Rate: 0\n      };\n      data.push(entry);\n      document.getElementById(\"resRate\").innerHTML = \"Disconnected\";\n    }\n\n    this.setState({\n      date: new Date()\n    });\n  }\n\n}\n\n;\nexport default Plot;","map":{"version":3,"sources":["/Users/liuzhenwei/Desktop/Respiration_React/my-app/src/Component/Plot.js"],"names":["React","Button","Line","ContinuousLegend","data","timer1","entry","res","config","xField","yField","label","style","fill","point","size","shape","fetchData","fetch","then","response","json","console","log","Plot","Component","constructor","handleClick","setState","state","isToggleOn","render","textAlign","document","getElementById","innerHTML","date","Date","componentDidMount","timerID","setInterval","tick","componentWillUnmount","clearInterval","resR","result","ok","error","className","TimeStamp","Rate","Math","round","push"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Button} from 'antd';\nimport { Line } from '@ant-design/charts';\nimport { ContinuousLegend } from '@antv/g2/lib/dependents';\n\n\nvar data = [];\nvar timer1 = 0;\nvar entry = {};\nvar res = {};\n\n// Main Plot configuration\nconst config = {\n  data,\n  xField: 'TimeStamp',\n  yField: 'Rate',\n  label: {\n    style: {\n      fill: '#aaa',\n    },\n  },\n  point: {\n    size: 1,\n    shape: 'dot',\n  },\n};\n\n// Communicate with particle Photon\nconst fetchData = () => {\n  // David https://api.particle.io/v1/devices/440048000d51353532343635/output1?access_token=5337556d927166dd61f24a448628ab25b487250d\n  // Siyuan https://api.particle.io/v1/devices/2d004e000d51353532343635/analogvalue?access_token=4ec91795c48fcb469901a8c61e670f4d75ec5cce\n  return fetch(\"https://api.particle.io/v1/devices/440048000d51353532343635/output1?access_token=5337556d927166dd61f24a448628ab25b487250d\")\n        .then((response) => response.json())\n        .then((data) => res = data)\n        .then(console.log(res));}\n\n// Main Module \nclass Plot extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n        date: new Date(),\n        isToggleOn: true\n    }\n}\nhandleClick = () => {\n  this.setState(state => ({\n    isToggleOn: !state.isToggleOn\n  }));\n}\n\ncomponentDidMount() {\n    this.timerID = setInterval(\n        () => this.tick(),\n        // time interval in millis;\n        1000\n    );\n}\n\ncomponentWillUnmount() {\n    clearInterval(this.timerID);\n}\n\ntick() {\n  fetchData();\n  // let resR = Math.floor(Math.random() * (17 - 8) + 8);\n  let resR = res.result;\n    \n  if (this.state.isToggleOn == true){\n    if(res.ok == false){ // Connected, but not reading\n      document.getElementById(\"resRate\").innerHTML = \"Photon error || \" + res.error ;\n      document.getElementById(\"resRate\").className = \"resRate_red\";\n    }  else if (resR == 0){  // Connected, Measring \n      document.getElementById(\"resRate\").innerHTML = \"Measuring\";\n      document.getElementById(\"resRate\").className = \"resRate_green\";\n    } else if (resR < 6 || resR > 60){  // Bad result \n      console.log(resR);\n      document.getElementById(\"resRate\").innerHTML = \"Check Epidermal Device (Strain Gauge)\"; // Please check adhesive (maybe loose)\n      document.getElementById(\"resRate\").className = \"resRate_red\";\n    } else if (resR >= 6 && resR <= 60){ // In normal range\n      entry = {TimeStamp: timer1, Rate: Math.round(resR)};\n      timer1 = timer1 + 1;\n      data.push(entry)\n      document.getElementById(\"resRate\").innerHTML = Math.round(resR);\n      document.getElementById(\"resRate\").className = \"resRate_black\";\n    } else if (res.error == \"Timed out.\" ){ \n      document.getElementById(\"resRate\").innerHTML = \"Cannot connect to Particle Cloud\";\n      document.getElementById(\"resRate\").className = \"resRate_red\";\n    } else {\n      document.getElementById(\"resRate\").innerHTML = \"Cannot connection with Photon\";\n      document.getElementById(\"resRate\").className = \"resRate_red\";\n    }\n    \n  } else if (this.state.isToggleOn == false) {\n    entry = {TimeStamp: timer1, Rate: 0}\n    data.push(entry)\n    document.getElementById(\"resRate\").innerHTML = \"Disconnected\";\n  }\n    this.setState({\n        date: new Date()\n    })\n}\n      render = () => {\n        if (this.state.isToggleOn == true){\n          return (\n          <>\n          <Button id = \"toggle\" style= {{textAlign:'center'}} type = 'primary' onClick={this.handleClick}>\n                  {this.state.isToggleOn ? 'ON' : 'OFF'}\n          </Button>\n          <br></br>\n          <Line {...config} />\n          <br></br>\n          </>);\n        } else if (this.state.isToggleOn == false){\n          document.getElementById(\"resRate\").innerHTML = \"Disconnected\";\n          // data = [];\n          return (\n          <>\n          \n          <Button id = \"toggle\" style= {{textAlign:'center'}} type = 'secondary' onClick={this.handleClick}>\n                  {this.state.isToggleOn ? 'ON' : 'OFF'}\n          </Button> \n          <br></br>\n          <Line {...config} />\n          <br></br>\n          \n          </>);\n        }\n        \n      }\n       \n};\n\n\n\nexport default Plot;"]},"metadata":{},"sourceType":"module"}