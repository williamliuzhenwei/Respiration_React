{"ast":null,"code":"import _regeneratorRuntime from \"/Users/liuzhenwei/Desktop/Respiration_React/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/liuzhenwei/Desktop/Respiration_React/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/liuzhenwei/Desktop/Respiration_React/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/liuzhenwei/Desktop/Respiration_React/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/liuzhenwei/Desktop/Respiration_React/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n// @ts-nocheck\n\n/**\n * @fileOverview fruchterman layout\n * @author shiwu.wyy@antfin.com\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Base } from \"../base\";\nimport { isNumber } from \"../../util\"; // @ts-ignore\n\nimport { World } from \"@antv/g-webgpu\"; // compile at runtime in dev mode\n\nimport { buildTextureData, attributesToTextureData } from \"../../util/gpu\"; // use compiled bundle in prod mode\n\nimport { fruchtermanBundle, clusterBundle } from \"./fruchtermanShader\";\nimport { LAYOUT_MESSAGE } from \"../constants\";\n/**\n * fruchterman 布局\n */\n\nexport var FruchtermanGPULayout = /*#__PURE__*/function (_Base) {\n  _inherits(FruchtermanGPULayout, _Base);\n\n  var _super = _createSuper(FruchtermanGPULayout);\n\n  function FruchtermanGPULayout(options) {\n    var _this;\n\n    _classCallCheck(this, FruchtermanGPULayout);\n\n    _this = _super.call(this);\n    /** 停止迭代的最大迭代数 */\n\n    _this.maxIteration = 1000;\n    /** 重力大小，影响图的紧凑程度 */\n\n    _this.gravity = 10;\n    /** 速度 */\n\n    _this.speed = 1;\n    /** 是否产生聚类力 */\n\n    _this.clustering = false;\n    /** 根据哪个字段聚类 */\n\n    _this.clusterField = \"cluster\";\n    /** 聚类力大小 */\n\n    _this.clusterGravity = 10;\n    /** 是否启用web worker。前提是在web worker里执行布局，否则无效\t*/\n\n    _this.workerEnabled = false;\n    _this.nodes = [];\n    _this.edges = [];\n    _this.width = 300;\n    _this.height = 300;\n    _this.nodeMap = {};\n    _this.nodeIdxMap = {};\n\n    _this.updateCfg(options);\n\n    return _this;\n  }\n\n  _createClass(FruchtermanGPULayout, [{\n    key: \"getDefaultCfg\",\n    value: function getDefaultCfg() {\n      return {\n        maxIteration: 1000,\n        gravity: 10,\n        speed: 1,\n        clustering: false,\n        clusterGravity: 10\n      };\n    }\n    /**\n     * 执行布局\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var self, nodes, center, nodeMap, nodeIdxMap;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                self = this;\n                nodes = self.nodes;\n\n                if (!(!nodes || nodes.length === 0)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                if (self.onLayoutEnd) self.onLayoutEnd();\n                return _context.abrupt(\"return\");\n\n              case 5:\n                if (!self.width && typeof window !== \"undefined\") {\n                  self.width = window.innerWidth;\n                }\n\n                if (!self.height && typeof window !== \"undefined\") {\n                  self.height = window.innerHeight;\n                }\n\n                if (!self.center) {\n                  self.center = [self.width / 2, self.height / 2];\n                }\n\n                center = self.center;\n\n                if (!(nodes.length === 1)) {\n                  _context.next = 14;\n                  break;\n                }\n\n                nodes[0].x = center[0];\n                nodes[0].y = center[1];\n                if (self.onLayoutEnd) self.onLayoutEnd();\n                return _context.abrupt(\"return\");\n\n              case 14:\n                nodeMap = {};\n                nodeIdxMap = {};\n                nodes.forEach(function (node, i) {\n                  if (!isNumber(node.x)) node.x = Math.random() * _this2.width;\n                  if (!isNumber(node.y)) node.y = Math.random() * _this2.height;\n                  nodeMap[node.id] = node;\n                  nodeIdxMap[node.id] = i;\n                });\n                self.nodeMap = nodeMap;\n                self.nodeIdxMap = nodeIdxMap; // layout\n\n                _context.next = 21;\n                return self.run();\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"executeWithWorker\",\n    value: function executeWithWorker(canvas, ctx) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this3 = this;\n\n        var self, nodes, center, nodeMap, nodeIdxMap;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                self = this;\n                nodes = self.nodes;\n                center = self.center;\n\n                if (!(!nodes || nodes.length === 0)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 5:\n                if (!(nodes.length === 1)) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                nodes[0].x = center[0];\n                nodes[0].y = center[1];\n                return _context2.abrupt(\"return\");\n\n              case 9:\n                nodeMap = {};\n                nodeIdxMap = {};\n                nodes.forEach(function (node, i) {\n                  if (!isNumber(node.x)) node.x = Math.random() * _this3.width;\n                  if (!isNumber(node.y)) node.y = Math.random() * _this3.height;\n                  nodeMap[node.id] = node;\n                  nodeIdxMap[node.id] = i;\n                });\n                self.nodeMap = nodeMap;\n                self.nodeIdxMap = nodeIdxMap; // layout\n\n                _context2.next = 16;\n                return self.run(canvas, ctx);\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"run\",\n    value: function run(canvas, ctx) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _this4 = this;\n\n        var self, nodes, edges, maxIteration, center, area, maxDisplace, k2, k, speed, clustering, _attributesToTextureD, attributeArray, clusterCount, numParticles, _buildTextureData, maxEdgePerVetex, nodesEdgesArray, workerEnabled, world, onLayoutEnd, clusterCenters, i, kernelFruchterman, kernelCluster, execute;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                self = this;\n                nodes = self.nodes;\n                edges = self.edges;\n                maxIteration = self.maxIteration;\n                center = self.center;\n                area = self.height * self.width;\n                maxDisplace = Math.sqrt(area) / 10;\n                k2 = area / (nodes.length + 1);\n                k = Math.sqrt(k2);\n                speed = self.speed;\n                clustering = self.clustering;\n                _attributesToTextureD = attributesToTextureData([self.clusterField], nodes), attributeArray = _attributesToTextureD.array, clusterCount = _attributesToTextureD.count; // pushing the fx and fy\n\n                nodes.forEach(function (node, i) {\n                  var fx = 0;\n                  var fy = 0;\n\n                  if (isNumber(node.fx) && isNumber(node.fy)) {\n                    fx = node.fx || 0.001;\n                    fy = node.fy || 0.001;\n                  }\n\n                  attributeArray[4 * i + 1] = fx;\n                  attributeArray[4 * i + 2] = fy;\n                });\n                numParticles = nodes.length;\n                _buildTextureData = buildTextureData(nodes, edges), maxEdgePerVetex = _buildTextureData.maxEdgePerVetex, nodesEdgesArray = _buildTextureData.array;\n                workerEnabled = self.workerEnabled;\n\n                if (workerEnabled) {\n                  world = World.create({\n                    canvas: canvas,\n                    engineOptions: {\n                      supportCompute: true\n                    }\n                  });\n                } else {\n                  world = World.create({\n                    engineOptions: {\n                      supportCompute: true\n                    }\n                  });\n                } // compile at runtime in dev mode\n                // const compiler = new Compiler()\n                // const fruchtermanBundle = compiler.compileBundle(fruchtermanCode)\n                // const clusterBundle = compiler.compileBundle(clusterCode)\n                // use compiled bundle in prod mode\n                // console.log(fruchtermanBundle.toString())\n                // console.log(clusterBundle.toString())\n\n\n                onLayoutEnd = self.onLayoutEnd;\n                clusterCenters = [];\n\n                for (i = 0; i < clusterCount; i++) {\n                  clusterCenters.push(0, 0, 0, 0);\n                }\n\n                kernelFruchterman = world.createKernel(fruchtermanBundle).setDispatch([numParticles, 1, 1]).setBinding({\n                  u_Data: nodesEdgesArray,\n                  u_K: k,\n                  u_K2: k2,\n                  u_Gravity: self.gravity,\n                  u_ClusterGravity: self.clusterGravity || self.gravity || 1,\n                  u_Speed: speed,\n                  u_MaxDisplace: maxDisplace,\n                  u_Clustering: clustering ? 1 : 0,\n                  u_Center: center,\n                  u_AttributeArray: attributeArray,\n                  u_ClusterCenters: clusterCenters,\n                  MAX_EDGE_PER_VERTEX: maxEdgePerVetex,\n                  VERTEX_COUNT: numParticles\n                });\n\n                if (clustering) {\n                  kernelCluster = world.createKernel(clusterBundle).setDispatch([clusterCount, 1, 1]).setBinding({\n                    u_Data: nodesEdgesArray,\n                    u_NodeAttributes: attributeArray,\n                    u_ClusterCenters: clusterCenters,\n                    VERTEX_COUNT: numParticles,\n                    CLUSTER_COUNT: clusterCount\n                  });\n                }\n\n                execute = function execute() {\n                  return __awaiter(_this4, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                    var _i, finalParticleData;\n\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            _i = 0;\n\n                          case 1:\n                            if (!(_i < maxIteration)) {\n                              _context3.next = 13;\n                              break;\n                            }\n\n                            _context3.next = 4;\n                            return kernelFruchterman.execute();\n\n                          case 4:\n                            if (!clustering) {\n                              _context3.next = 9;\n                              break;\n                            }\n\n                            kernelCluster.setBinding({\n                              u_Data: kernelFruchterman\n                            }); // eslint-disable-next-line no-await-in-loop\n\n                            _context3.next = 8;\n                            return kernelCluster.execute();\n\n                          case 8:\n                            kernelFruchterman.setBinding({\n                              u_ClusterCenters: kernelCluster\n                            });\n\n                          case 9:\n                            kernelFruchterman.setBinding({\n                              u_MaxDisplace: maxDisplace *= 0.99\n                            });\n\n                          case 10:\n                            _i++;\n                            _context3.next = 1;\n                            break;\n\n                          case 13:\n                            _context3.next = 15;\n                            return kernelFruchterman.getOutput();\n\n                          case 15:\n                            finalParticleData = _context3.sent;\n\n                            if (canvas) {\n                              // 传递数据给主线程\n                              ctx.postMessage({\n                                type: LAYOUT_MESSAGE.GPUEND,\n                                vertexEdgeData: finalParticleData // edgeIndexBufferData,\n\n                              });\n                            } else {\n                              nodes.forEach(function (node, i) {\n                                var x = finalParticleData[4 * i];\n                                var y = finalParticleData[4 * i + 1];\n                                node.x = x;\n                                node.y = y;\n                              });\n                            }\n\n                            if (onLayoutEnd) onLayoutEnd();\n\n                          case 18:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }));\n                };\n\n                _context4.next = 25;\n                return execute();\n\n              case 25:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return \"fruchterman-gpu\";\n    }\n  }]);\n\n  return FruchtermanGPULayout;\n}(Base);","map":{"version":3,"sources":["../../../src/layout/gpu/fruchterman.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["// @ts-nocheck\n/**\n * @fileOverview fruchterman layout\n * @author shiwu.wyy@antfin.com\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Base } from \"../base\";\nimport { isNumber } from \"../../util\";\n// @ts-ignore\nimport { World } from \"@antv/g-webgpu\";\n// compile at runtime in dev mode\nimport { buildTextureData, attributesToTextureData } from \"../../util/gpu\";\n// use compiled bundle in prod mode\nimport { fruchtermanBundle, clusterBundle } from \"./fruchtermanShader\";\nimport { LAYOUT_MESSAGE } from \"../constants\";\n/**\n * fruchterman 布局\n */\nexport class FruchtermanGPULayout extends Base {\n    constructor(options) {\n        super();\n        /** 停止迭代的最大迭代数 */\n        this.maxIteration = 1000;\n        /** 重力大小，影响图的紧凑程度 */\n        this.gravity = 10;\n        /** 速度 */\n        this.speed = 1;\n        /** 是否产生聚类力 */\n        this.clustering = false;\n        /** 根据哪个字段聚类 */\n        this.clusterField = \"cluster\";\n        /** 聚类力大小 */\n        this.clusterGravity = 10;\n        /** 是否启用web worker。前提是在web worker里执行布局，否则无效\t*/\n        this.workerEnabled = false;\n        this.nodes = [];\n        this.edges = [];\n        this.width = 300;\n        this.height = 300;\n        this.nodeMap = {};\n        this.nodeIdxMap = {};\n        this.updateCfg(options);\n    }\n    getDefaultCfg() {\n        return {\n            maxIteration: 1000,\n            gravity: 10,\n            speed: 1,\n            clustering: false,\n            clusterGravity: 10\n        };\n    }\n    /**\n     * 执行布局\n     */\n    execute() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const self = this;\n            const nodes = self.nodes;\n            if (!nodes || nodes.length === 0) {\n                if (self.onLayoutEnd)\n                    self.onLayoutEnd();\n                return;\n            }\n            if (!self.width && typeof window !== \"undefined\") {\n                self.width = window.innerWidth;\n            }\n            if (!self.height && typeof window !== \"undefined\") {\n                self.height = window.innerHeight;\n            }\n            if (!self.center) {\n                self.center = [self.width / 2, self.height / 2];\n            }\n            const center = self.center;\n            if (nodes.length === 1) {\n                nodes[0].x = center[0];\n                nodes[0].y = center[1];\n                if (self.onLayoutEnd)\n                    self.onLayoutEnd();\n                return;\n            }\n            const nodeMap = {};\n            const nodeIdxMap = {};\n            nodes.forEach((node, i) => {\n                if (!isNumber(node.x))\n                    node.x = Math.random() * this.width;\n                if (!isNumber(node.y))\n                    node.y = Math.random() * this.height;\n                nodeMap[node.id] = node;\n                nodeIdxMap[node.id] = i;\n            });\n            self.nodeMap = nodeMap;\n            self.nodeIdxMap = nodeIdxMap;\n            // layout\n            yield self.run();\n        });\n    }\n    executeWithWorker(canvas, ctx) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const self = this;\n            const nodes = self.nodes;\n            const center = self.center;\n            if (!nodes || nodes.length === 0) {\n                return;\n            }\n            if (nodes.length === 1) {\n                nodes[0].x = center[0];\n                nodes[0].y = center[1];\n                return;\n            }\n            const nodeMap = {};\n            const nodeIdxMap = {};\n            nodes.forEach((node, i) => {\n                if (!isNumber(node.x))\n                    node.x = Math.random() * this.width;\n                if (!isNumber(node.y))\n                    node.y = Math.random() * this.height;\n                nodeMap[node.id] = node;\n                nodeIdxMap[node.id] = i;\n            });\n            self.nodeMap = nodeMap;\n            self.nodeIdxMap = nodeIdxMap;\n            // layout\n            yield self.run(canvas, ctx);\n        });\n    }\n    run(canvas, ctx) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const self = this;\n            const nodes = self.nodes;\n            const edges = self.edges;\n            const maxIteration = self.maxIteration;\n            const center = self.center;\n            const area = self.height * self.width;\n            let maxDisplace = Math.sqrt(area) / 10;\n            const k2 = area / (nodes.length + 1);\n            const k = Math.sqrt(k2);\n            const speed = self.speed;\n            const clustering = self.clustering;\n            const { array: attributeArray, count: clusterCount } = attributesToTextureData([self.clusterField], nodes);\n            // pushing the fx and fy\n            nodes.forEach((node, i) => {\n                let fx = 0;\n                let fy = 0;\n                if (isNumber(node.fx) && isNumber(node.fy)) {\n                    fx = node.fx || 0.001;\n                    fy = node.fy || 0.001;\n                }\n                attributeArray[4 * i + 1] = fx;\n                attributeArray[4 * i + 2] = fy;\n            });\n            const numParticles = nodes.length;\n            const { maxEdgePerVetex, array: nodesEdgesArray } = buildTextureData(nodes, edges);\n            const workerEnabled = self.workerEnabled;\n            let world;\n            if (workerEnabled) {\n                world = World.create({\n                    canvas,\n                    engineOptions: {\n                        supportCompute: true\n                    }\n                });\n            }\n            else {\n                world = World.create({\n                    engineOptions: {\n                        supportCompute: true\n                    }\n                });\n            }\n            // compile at runtime in dev mode\n            // const compiler = new Compiler()\n            // const fruchtermanBundle = compiler.compileBundle(fruchtermanCode)\n            // const clusterBundle = compiler.compileBundle(clusterCode)\n            // use compiled bundle in prod mode\n            // console.log(fruchtermanBundle.toString())\n            // console.log(clusterBundle.toString())\n            const onLayoutEnd = self.onLayoutEnd;\n            const clusterCenters = [];\n            for (let i = 0; i < clusterCount; i++) {\n                clusterCenters.push(0, 0, 0, 0);\n            }\n            const kernelFruchterman = world\n                .createKernel(fruchtermanBundle)\n                .setDispatch([numParticles, 1, 1])\n                .setBinding({\n                u_Data: nodesEdgesArray,\n                u_K: k,\n                u_K2: k2,\n                u_Gravity: self.gravity,\n                u_ClusterGravity: self.clusterGravity || self.gravity || 1,\n                u_Speed: speed,\n                u_MaxDisplace: maxDisplace,\n                u_Clustering: clustering ? 1 : 0,\n                u_Center: center,\n                u_AttributeArray: attributeArray,\n                u_ClusterCenters: clusterCenters,\n                MAX_EDGE_PER_VERTEX: maxEdgePerVetex,\n                VERTEX_COUNT: numParticles\n            });\n            let kernelCluster;\n            if (clustering) {\n                kernelCluster = world\n                    .createKernel(clusterBundle)\n                    .setDispatch([clusterCount, 1, 1])\n                    .setBinding({\n                    u_Data: nodesEdgesArray,\n                    u_NodeAttributes: attributeArray,\n                    u_ClusterCenters: clusterCenters,\n                    VERTEX_COUNT: numParticles,\n                    CLUSTER_COUNT: clusterCount\n                });\n            }\n            const execute = () => __awaiter(this, void 0, void 0, function* () {\n                for (let i = 0; i < maxIteration; i++) {\n                    // eslint-disable-next-line no-await-in-loop\n                    yield kernelFruchterman.execute();\n                    if (clustering) {\n                        kernelCluster.setBinding({\n                            u_Data: kernelFruchterman\n                        });\n                        // eslint-disable-next-line no-await-in-loop\n                        yield kernelCluster.execute();\n                        kernelFruchterman.setBinding({\n                            u_ClusterCenters: kernelCluster\n                        });\n                    }\n                    kernelFruchterman.setBinding({\n                        u_MaxDisplace: maxDisplace *= 0.99\n                    });\n                }\n                const finalParticleData = yield kernelFruchterman.getOutput();\n                if (canvas) {\n                    // 传递数据给主线程\n                    ctx.postMessage({\n                        type: LAYOUT_MESSAGE.GPUEND,\n                        vertexEdgeData: finalParticleData\n                        // edgeIndexBufferData,\n                    });\n                }\n                else {\n                    nodes.forEach((node, i) => {\n                        const x = finalParticleData[4 * i];\n                        const y = finalParticleData[4 * i + 1];\n                        node.x = x;\n                        node.y = y;\n                    });\n                }\n                if (onLayoutEnd)\n                    onLayoutEnd();\n            });\n            yield execute();\n        });\n    }\n    getType() {\n        return \"fruchterman-gpu\";\n    }\n}\n//# sourceMappingURL=fruchterman.js.map"]},"metadata":{},"sourceType":"module"}