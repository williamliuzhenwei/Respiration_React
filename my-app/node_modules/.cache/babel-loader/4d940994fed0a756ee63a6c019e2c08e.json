{"ast":null,"code":"import _classCallCheck from \"/Users/liuzhenwei/Desktop/Respiration_React/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/liuzhenwei/Desktop/Respiration_React/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/liuzhenwei/Desktop/Respiration_React/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/liuzhenwei/Desktop/Respiration_React/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * @fileOverview grid layout\n * @author shiwu.wyy@antfin.com\n * this algorithm refers to <cytoscape.js> - https://github.com/cytoscape/cytoscape.js/\n */\nimport { isString, isArray, isNumber, getDegree, isNaN, isObject } from \"../util\";\nimport { Base } from \"./base\";\n/**\n * 网格布局\n */\n\nexport var GridLayout = /*#__PURE__*/function (_Base) {\n  _inherits(GridLayout, _Base);\n\n  var _super = _createSuper(GridLayout);\n\n  function GridLayout(options) {\n    var _this;\n\n    _classCallCheck(this, GridLayout);\n\n    _this = _super.call(this);\n    /** 布局起始点 */\n\n    _this.begin = [0, 0];\n    /** prevents node overlap, may overflow boundingBox if not enough space */\n\n    _this.preventOverlap = true;\n    /** extra spacing around nodes when preventOverlap: true */\n\n    _this.preventOverlapPadding = 10;\n    /** uses all available space on false, uses minimal space on true */\n\n    _this.condense = false;\n    /** a sorting function to order the nodes; e.g. function(a, b){ return a.datapublic ('weight') - b.data('weight') } */\n\n    _this.sortBy = \"degree\";\n    _this.nodeSize = 30;\n    _this.nodes = [];\n    _this.edges = [];\n    _this.width = 300;\n    _this.height = 300;\n    _this.row = 0;\n    _this.col = 0;\n    _this.cellWidth = 0;\n    _this.cellHeight = 0;\n    _this.cellUsed = {};\n    _this.id2manPos = {};\n    /** 迭代结束的回调函数 */\n\n    _this.onLayoutEnd = function () {};\n\n    _this.updateCfg(options);\n\n    return _this;\n  }\n\n  _createClass(GridLayout, [{\n    key: \"getDefaultCfg\",\n    value: function getDefaultCfg() {\n      return {\n        begin: [0, 0],\n        preventOverlap: true,\n        preventOverlapPadding: 10,\n        condense: false,\n        rows: undefined,\n        cols: undefined,\n        position: undefined,\n        sortBy: \"degree\",\n        nodeSize: 30\n      };\n    }\n    /**\n     * 执行布局\n     */\n\n  }, {\n    key: \"execute\",\n    value: function execute() {\n      var self = this;\n      var nodes = self.nodes;\n      var edges = self.edges;\n      var n = nodes.length;\n      var begin = self.begin;\n\n      if (n === 0) {\n        if (self.onLayoutEnd) self.onLayoutEnd();\n        return {\n          nodes: nodes,\n          edges: edges\n        };\n      }\n\n      if (n === 1) {\n        nodes[0].x = begin[0];\n        nodes[0].y = begin[1];\n        if (self.onLayoutEnd) self.onLayoutEnd();\n        return {\n          nodes: nodes,\n          edges: edges\n        };\n      }\n\n      var layoutNodes = [];\n      nodes.forEach(function (node) {\n        layoutNodes.push(node);\n      });\n      var nodeIdxMap = {};\n      layoutNodes.forEach(function (node, i) {\n        nodeIdxMap[node.id] = i;\n      });\n\n      if (self.sortBy === \"degree\" || !isString(self.sortBy) || layoutNodes[0][self.sortBy] === undefined) {\n        self.sortBy = \"degree\";\n\n        if (isNaN(nodes[0].degree)) {\n          var values = getDegree(layoutNodes.length, nodeIdxMap, edges);\n          layoutNodes.forEach(function (node, i) {\n            node.degree = values[i];\n          });\n        }\n      } // sort nodes by value\n\n\n      layoutNodes.sort(function (n1, n2) {\n        return n2[self.sortBy] - n1[self.sortBy];\n      });\n\n      if (!self.width && typeof window !== \"undefined\") {\n        self.width = window.innerWidth;\n      }\n\n      if (!self.height && typeof window !== \"undefined\") {\n        self.height = window.innerHeight;\n      }\n\n      var oRows = self.rows;\n      var oCols = self.cols != null ? self.cols : self.columns;\n      self.cells = n; // if rows or columns were set in self, use those values\n\n      if (oRows != null && oCols != null) {\n        self.rows = oRows;\n        self.cols = oCols;\n      } else if (oRows != null && oCols == null) {\n        self.rows = oRows;\n        self.cols = Math.ceil(self.cells / self.rows);\n      } else if (oRows == null && oCols != null) {\n        self.cols = oCols;\n        self.rows = Math.ceil(self.cells / self.cols);\n      } else {\n        // otherwise use the automatic values and adjust accordingly\t      // otherwise use the automatic values and adjust accordingly\n        // width/height * splits^2 = cells where splits is number of times to split width\n        self.splits = Math.sqrt(self.cells * self.height / self.width);\n        self.rows = Math.round(self.splits);\n        self.cols = Math.round(self.width / self.height * self.splits);\n      }\n\n      if (self.cols * self.rows > self.cells) {\n        // otherwise use the automatic values and adjust accordingly\n        // if rounding was up, see if we can reduce rows or columns\n        var sm = self.small();\n        var lg = self.large(); // reducing the small side takes away the most cells, so try it first\n\n        if ((sm - 1) * lg >= self.cells) {\n          self.small(sm - 1);\n        } else if ((lg - 1) * sm >= self.cells) {\n          self.large(lg - 1);\n        }\n      } else {\n        // if rounding was too low, add rows or columns\n        while (self.cols * self.rows < self.cells) {\n          var _sm = self.small();\n\n          var _lg = self.large(); // try to add to larger side first (adds less in multiplication)\n\n\n          if ((_lg + 1) * _sm >= self.cells) {\n            self.large(_lg + 1);\n          } else {\n            self.small(_sm + 1);\n          }\n        }\n      }\n\n      self.cellWidth = self.width / self.cols;\n      self.cellHeight = self.height / self.rows;\n\n      if (self.condense) {\n        self.cellWidth = 0;\n        self.cellHeight = 0;\n      }\n\n      if (self.preventOverlap) {\n        layoutNodes.forEach(function (node) {\n          if (!node.x || !node.y) {\n            // for bb\n            node.x = 0;\n            node.y = 0;\n          }\n\n          var nodew;\n          var nodeh;\n\n          if (isArray(node.size)) {\n            nodew = node.size[0];\n            nodeh = node.size[1];\n          } else if (isNumber(node.size)) {\n            nodew = node.size;\n            nodeh = node.size;\n          } else if (isObject(node.size)) {\n            nodew = node.size.width;\n            nodeh = node.size.height;\n          }\n\n          if (nodew === undefined || nodeh === undefined) {\n            if (isArray(self.nodeSize)) {\n              nodew = self.nodeSize[0];\n              nodeh = self.nodeSize[1];\n            } else if (isNumber(self.nodeSize)) {\n              nodew = self.nodeSize;\n              nodeh = self.nodeSize;\n            } else {\n              nodew = 30;\n              nodeh = 30;\n            }\n          }\n\n          var p = self.preventOverlapPadding;\n          var w = nodew + p;\n          var h = nodeh + p;\n          self.cellWidth = Math.max(self.cellWidth, w);\n          self.cellHeight = Math.max(self.cellHeight, h);\n        });\n      }\n\n      self.cellUsed = {}; // e.g. 'c-0-2' => true\n      // to keep track of current cell position\n\n      self.row = 0;\n      self.col = 0; // get a cache of all the manual positions\n\n      self.id2manPos = {};\n\n      for (var i = 0; i < layoutNodes.length; i++) {\n        var node = layoutNodes[i];\n        var rcPos = void 0;\n\n        if (self.position) {\n          rcPos = self.position(node);\n        }\n\n        if (rcPos && (rcPos.row !== undefined || rcPos.col !== undefined)) {\n          // must have at least row or col def'd\n          var pos = {\n            row: rcPos.row,\n            col: rcPos.col\n          };\n\n          if (pos.col === undefined) {\n            // find unused col\n            pos.col = 0;\n\n            while (self.used(pos.row, pos.col)) {\n              pos.col++;\n            }\n          } else if (pos.row === undefined) {\n            // find unused row\n            pos.row = 0;\n\n            while (self.used(pos.row, pos.col)) {\n              pos.row++;\n            }\n          }\n\n          self.id2manPos[node.id] = pos;\n          self.use(pos.row, pos.col);\n        }\n\n        self.getPos(node);\n      }\n\n      if (self.onLayoutEnd) self.onLayoutEnd();\n      return {\n        edges: edges,\n        nodes: layoutNodes\n      };\n    }\n  }, {\n    key: \"small\",\n    value: function small(val) {\n      var self = this;\n      var res;\n      var rows = self.rows || 5;\n      var cols = self.cols || 5;\n\n      if (val == null) {\n        res = Math.min(rows, cols);\n      } else {\n        var min = Math.min(rows, cols);\n\n        if (min === self.rows) {\n          self.rows = val;\n        } else {\n          self.cols = val;\n        }\n      }\n\n      return res;\n    }\n  }, {\n    key: \"large\",\n    value: function large(val) {\n      var self = this;\n      var res;\n      var rows = self.rows || 5;\n      var cols = self.cols || 5;\n\n      if (val == null) {\n        res = Math.max(rows, cols);\n      } else {\n        var max = Math.max(rows, cols);\n\n        if (max === self.rows) {\n          self.rows = val;\n        } else {\n          self.cols = val;\n        }\n      }\n\n      return res;\n    }\n  }, {\n    key: \"used\",\n    value: function used(row, col) {\n      var self = this;\n      return self.cellUsed[\"c-\".concat(row, \"-\").concat(col)] || false;\n    }\n  }, {\n    key: \"use\",\n    value: function use(row, col) {\n      var self = this;\n      self.cellUsed[\"c-\".concat(row, \"-\").concat(col)] = true;\n    }\n  }, {\n    key: \"moveToNextCell\",\n    value: function moveToNextCell() {\n      var self = this;\n      var cols = self.cols || 5;\n      self.col++;\n\n      if (self.col >= cols) {\n        self.col = 0;\n        self.row++;\n      }\n    }\n  }, {\n    key: \"getPos\",\n    value: function getPos(node) {\n      var self = this;\n      var begin = self.begin;\n      var cellWidth = self.cellWidth;\n      var cellHeight = self.cellHeight;\n      var x;\n      var y; // see if we have a manual position set\n\n      var rcPos = self.id2manPos[node.id];\n\n      if (rcPos) {\n        x = rcPos.col * cellWidth + cellWidth / 2 + begin[0];\n        y = rcPos.row * cellHeight + cellHeight / 2 + begin[1];\n      } else {\n        // otherwise set automatically\n        while (self.used(self.row, self.col)) {\n          self.moveToNextCell();\n        }\n\n        x = self.col * cellWidth + cellWidth / 2 + begin[0];\n        y = self.row * cellHeight + cellHeight / 2 + begin[1];\n        self.use(self.row, self.col);\n        self.moveToNextCell();\n      }\n\n      node.x = x;\n      node.y = y;\n    }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      return \"grid\";\n    }\n  }]);\n\n  return GridLayout;\n}(Base);","map":{"version":3,"sources":["../../src/layout/grid.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @fileOverview grid layout\n * @author shiwu.wyy@antfin.com\n * this algorithm refers to <cytoscape.js> - https://github.com/cytoscape/cytoscape.js/\n */\nimport { isString, isArray, isNumber, getDegree, isNaN, isObject } from \"../util\";\nimport { Base } from \"./base\";\n/**\n * 网格布局\n */\nexport class GridLayout extends Base {\n    constructor(options) {\n        super();\n        /** 布局起始点 */\n        this.begin = [0, 0];\n        /** prevents node overlap, may overflow boundingBox if not enough space */\n        this.preventOverlap = true;\n        /** extra spacing around nodes when preventOverlap: true */\n        this.preventOverlapPadding = 10;\n        /** uses all available space on false, uses minimal space on true */\n        this.condense = false;\n        /** a sorting function to order the nodes; e.g. function(a, b){ return a.datapublic ('weight') - b.data('weight') } */\n        this.sortBy = \"degree\";\n        this.nodeSize = 30;\n        this.nodes = [];\n        this.edges = [];\n        this.width = 300;\n        this.height = 300;\n        this.row = 0;\n        this.col = 0;\n        this.cellWidth = 0;\n        this.cellHeight = 0;\n        this.cellUsed = {};\n        this.id2manPos = {};\n        /** 迭代结束的回调函数 */\n        this.onLayoutEnd = () => { };\n        this.updateCfg(options);\n    }\n    getDefaultCfg() {\n        return {\n            begin: [0, 0],\n            preventOverlap: true,\n            preventOverlapPadding: 10,\n            condense: false,\n            rows: undefined,\n            cols: undefined,\n            position: undefined,\n            sortBy: \"degree\",\n            nodeSize: 30\n        };\n    }\n    /**\n     * 执行布局\n     */\n    execute() {\n        const self = this;\n        const nodes = self.nodes;\n        const edges = self.edges;\n        const n = nodes.length;\n        const begin = self.begin;\n        if (n === 0) {\n            if (self.onLayoutEnd)\n                self.onLayoutEnd();\n            return {\n                nodes,\n                edges\n            };\n        }\n        if (n === 1) {\n            nodes[0].x = begin[0];\n            nodes[0].y = begin[1];\n            if (self.onLayoutEnd)\n                self.onLayoutEnd();\n            return {\n                nodes,\n                edges,\n            };\n        }\n        const layoutNodes = [];\n        nodes.forEach((node) => {\n            layoutNodes.push(node);\n        });\n        const nodeIdxMap = {};\n        layoutNodes.forEach((node, i) => {\n            nodeIdxMap[node.id] = i;\n        });\n        if (self.sortBy === \"degree\" ||\n            !isString(self.sortBy) ||\n            layoutNodes[0][self.sortBy] === undefined) {\n            self.sortBy = \"degree\";\n            if (isNaN(nodes[0].degree)) {\n                const values = getDegree(layoutNodes.length, nodeIdxMap, edges);\n                layoutNodes.forEach((node, i) => {\n                    node.degree = values[i];\n                });\n            }\n        }\n        // sort nodes by value\n        layoutNodes.sort((n1, n2) => n2[self.sortBy] - n1[self.sortBy]);\n        if (!self.width && typeof window !== \"undefined\") {\n            self.width = window.innerWidth;\n        }\n        if (!self.height && typeof window !== \"undefined\") {\n            self.height = window.innerHeight;\n        }\n        const oRows = self.rows;\n        const oCols = self.cols != null ? self.cols : self.columns;\n        self.cells = n;\n        // if rows or columns were set in self, use those values\n        if (oRows != null && oCols != null) {\n            self.rows = oRows;\n            self.cols = oCols;\n        }\n        else if (oRows != null && oCols == null) {\n            self.rows = oRows;\n            self.cols = Math.ceil(self.cells / self.rows);\n        }\n        else if (oRows == null && oCols != null) {\n            self.cols = oCols;\n            self.rows = Math.ceil(self.cells / self.cols);\n        }\n        else {\n            // otherwise use the automatic values and adjust accordingly\t      // otherwise use the automatic values and adjust accordingly\n            // width/height * splits^2 = cells where splits is number of times to split width\n            self.splits = Math.sqrt((self.cells * self.height) / self.width);\n            self.rows = Math.round(self.splits);\n            self.cols = Math.round((self.width / self.height) * self.splits);\n        }\n        if (self.cols * self.rows > self.cells) {\n            // otherwise use the automatic values and adjust accordingly\n            // if rounding was up, see if we can reduce rows or columns\n            const sm = self.small();\n            const lg = self.large();\n            // reducing the small side takes away the most cells, so try it first\n            if ((sm - 1) * lg >= self.cells) {\n                self.small(sm - 1);\n            }\n            else if ((lg - 1) * sm >= self.cells) {\n                self.large(lg - 1);\n            }\n        }\n        else {\n            // if rounding was too low, add rows or columns\n            while (self.cols * self.rows < self.cells) {\n                const sm = self.small();\n                const lg = self.large();\n                // try to add to larger side first (adds less in multiplication)\n                if ((lg + 1) * sm >= self.cells) {\n                    self.large(lg + 1);\n                }\n                else {\n                    self.small(sm + 1);\n                }\n            }\n        }\n        self.cellWidth = self.width / self.cols;\n        self.cellHeight = self.height / self.rows;\n        if (self.condense) {\n            self.cellWidth = 0;\n            self.cellHeight = 0;\n        }\n        if (self.preventOverlap) {\n            layoutNodes.forEach((node) => {\n                if (!node.x || !node.y) {\n                    // for bb\n                    node.x = 0;\n                    node.y = 0;\n                }\n                let nodew;\n                let nodeh;\n                if (isArray(node.size)) {\n                    nodew = node.size[0];\n                    nodeh = node.size[1];\n                }\n                else if (isNumber(node.size)) {\n                    nodew = node.size;\n                    nodeh = node.size;\n                }\n                else if (isObject(node.size)) {\n                    nodew = node.size.width;\n                    nodeh = node.size.height;\n                }\n                if (nodew === undefined || nodeh === undefined) {\n                    if (isArray(self.nodeSize)) {\n                        nodew = self.nodeSize[0];\n                        nodeh = self.nodeSize[1];\n                    }\n                    else if (isNumber(self.nodeSize)) {\n                        nodew = self.nodeSize;\n                        nodeh = self.nodeSize;\n                    }\n                    else {\n                        nodew = 30;\n                        nodeh = 30;\n                    }\n                }\n                const p = self.preventOverlapPadding;\n                const w = nodew + p;\n                const h = nodeh + p;\n                self.cellWidth = Math.max(self.cellWidth, w);\n                self.cellHeight = Math.max(self.cellHeight, h);\n            });\n        }\n        self.cellUsed = {}; // e.g. 'c-0-2' => true\n        // to keep track of current cell position\n        self.row = 0;\n        self.col = 0;\n        // get a cache of all the manual positions\n        self.id2manPos = {};\n        for (let i = 0; i < layoutNodes.length; i++) {\n            const node = layoutNodes[i];\n            let rcPos;\n            if (self.position) {\n                rcPos = self.position(node);\n            }\n            if (rcPos && (rcPos.row !== undefined || rcPos.col !== undefined)) {\n                // must have at least row or col def'd\n                const pos = {\n                    row: rcPos.row,\n                    col: rcPos.col\n                };\n                if (pos.col === undefined) {\n                    // find unused col\n                    pos.col = 0;\n                    while (self.used(pos.row, pos.col)) {\n                        pos.col++;\n                    }\n                }\n                else if (pos.row === undefined) {\n                    // find unused row\n                    pos.row = 0;\n                    while (self.used(pos.row, pos.col)) {\n                        pos.row++;\n                    }\n                }\n                self.id2manPos[node.id] = pos;\n                self.use(pos.row, pos.col);\n            }\n            self.getPos(node);\n        }\n        if (self.onLayoutEnd)\n            self.onLayoutEnd();\n        return {\n            edges,\n            nodes: layoutNodes\n        };\n    }\n    small(val) {\n        const self = this;\n        let res;\n        const rows = self.rows || 5;\n        const cols = self.cols || 5;\n        if (val == null) {\n            res = Math.min(rows, cols);\n        }\n        else {\n            const min = Math.min(rows, cols);\n            if (min === self.rows) {\n                self.rows = val;\n            }\n            else {\n                self.cols = val;\n            }\n        }\n        return res;\n    }\n    large(val) {\n        const self = this;\n        let res;\n        const rows = self.rows || 5;\n        const cols = self.cols || 5;\n        if (val == null) {\n            res = Math.max(rows, cols);\n        }\n        else {\n            const max = Math.max(rows, cols);\n            if (max === self.rows) {\n                self.rows = val;\n            }\n            else {\n                self.cols = val;\n            }\n        }\n        return res;\n    }\n    used(row, col) {\n        const self = this;\n        return self.cellUsed[`c-${row}-${col}`] || false;\n    }\n    use(row, col) {\n        const self = this;\n        self.cellUsed[`c-${row}-${col}`] = true;\n    }\n    moveToNextCell() {\n        const self = this;\n        const cols = self.cols || 5;\n        self.col++;\n        if (self.col >= cols) {\n            self.col = 0;\n            self.row++;\n        }\n    }\n    getPos(node) {\n        const self = this;\n        const begin = self.begin;\n        const cellWidth = self.cellWidth;\n        const cellHeight = self.cellHeight;\n        let x;\n        let y;\n        // see if we have a manual position set\n        const rcPos = self.id2manPos[node.id];\n        if (rcPos) {\n            x = rcPos.col * cellWidth + cellWidth / 2 + begin[0];\n            y = rcPos.row * cellHeight + cellHeight / 2 + begin[1];\n        }\n        else {\n            // otherwise set automatically\n            while (self.used(self.row, self.col)) {\n                self.moveToNextCell();\n            }\n            x = self.col * cellWidth + cellWidth / 2 + begin[0];\n            y = self.row * cellHeight + cellHeight / 2 + begin[1];\n            self.use(self.row, self.col);\n            self.moveToNextCell();\n        }\n        node.x = x;\n        node.y = y;\n    }\n    getType() {\n        return \"grid\";\n    }\n}\n//# sourceMappingURL=grid.js.map"]},"metadata":{},"sourceType":"module"}